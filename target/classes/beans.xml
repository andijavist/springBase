<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- bean definitions here -->
    <!--Дальше мы  с сайта содрали описание бинов.
    Каждый бин содержит поле id и явное указание имени его класса
    дальше (не понятное поле) описание property,
    "то что туда можно добавить" в нашем случае мы туда добавляем "процессор"- поле CPU
    то есть вкатываем зависимость, injecting dependence
    -->

    <!--    ниже пример с сайта docs.spring... (вариант конфигурации через property)
    будет добавлять зависимости на какой то другйо бин, используя сеттер главного класса Computer
    то есть некую зависимость на вариант конфигураци cpu - типа IntelCPU или AMD CPU-->

    <!--<bean id="myField"-->
    <!--class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">-->
    <!--<property name="staticField" value="java.sql.Connection.TRANSACTION_SERIALIZABLE"/>-->
    <!--</bean>-->

    <!--
    1) причем пример с property  делается через сеттер зависимости
    (того класса, от которого м ызависим)
    то есть в основном классе компьютер мы записываем
    сеттер на тот класс, который будет для нас зависимостью. для компьютера это будет AmdCpu, IntelCpu
    такая же херня с мемори.

    ВНИМАНИЕ

    есть и другие способы инджектить зависимости! не толь ко через сеттеры

    2) можем инжектнуть через конструктор!

    3) есть способ через "какой то статический метод" или через ФАБРИКУ!

    4) есть способ через рефлексию, мы как бы должны повесить на поле аннотацию autowired
    и зависимость от бина будет внедрена через reflection API
    -->

    <!-- 1 СПОСОБ через СЕТТЕР -->
    <!--бин "comp" как бы основной бин,
    который будет зависеть от других
    в проперти мы пишем именование его поля (от которого он зависит)
    и делаем атрибут реф, который будет указывать на бин cpu
    бин срu надо так же создавать в xml файле-->

    <!--<bean id ="comp" class="spring.xml.Comp">
    <property name="cpu" ref="AmdCpu"/>

    еще варик - явно указать класс бина, который мы
    бы будм использовать, но это для однократного использолвания. СМОТРИ НИЖЕ

    <property name="cpu">
    class = "spring.xml.IntelCPU"
    </property>

    </bean>-->

    <!--прописываем имя и некий атрибут ref,
    который "будет явно указывать на бин, который я буду создавать"что??
    то етсь зависимые классы от оснорвного, неаверное так-->

    <!-- классы(бины)-зависимости (для примеров с property)
      создаются без внешнего тэга <bean></bean>
      и без поля property (хотя может быть и многоуровневая иерархия зависимости, в данном примере нам проперти не нужны)-->
    <!--    <bean id ="IntelCPU" class="spring.xml.IntelCPU"/>-->
    <!--    <bean id ="AmdCpu" class="spring.xml.AmdCpu"/>-->


    <!-- 2 СПОСОБ через КОНСТРУКТОР -->
    <!--оч похож на способ через СЕТТЕРЫ-->

    <!--<bean id ="comp" class="spring.xml.Comp">-->
    <!--<constructor-arg name = "cpu" ref = "IntelCPU" />-->
    <!--</bean>-->

    <!--3 СПОСОБ через фабрику-->
    <!--мы должны создать отдельный java класс
    который будет создавать наши бины-зависимости в
    предлагается два вариант - статическая фабрика и динамическая-->

    <!-- зависимый бин-->
    <!--    <bean id ="comp" class="spring.xml.Comp">-->
    <!--    <constructor-arg  ref = "nonStaticCPUfactory-podbean" />-->
    <!--    </bean>-->
    <!--    -->

    <!--вариант со СТАТИЧЕСКОЙ ФАБРИКОЙ
    создаем рандомный айдишник,
    указываем класс фабрики
    а также статический метод (фабричный метод)
    он так и называется factory-method
    верхний тег закрывается>
    в теле бина <bean>...</bean>
    нам надо записать метод,
    который принимает параметр name в нашей фабрике
    называться метод будет constructor-arg
    как в пердыдущем варианте,
    но он не контсруктор по сути,
    а просто метод. так назвали.
    этот метод будет принимать параметр name
     со значением value-->

    <!--в отличие от предыдущих случаев внедрения
    мыф теперь можем ссылаться на бин, созданный
     этой статической фабрикой, потом мы в раздел
     ref = ... зависимого (основного) бина
     встваляем "staticCPU"-->

    <!--<bean id="staticCPUfactory"
          class="spring.xml.StaticCPUFactory"
          factory-method="createCPU"
    >
        <constructor-arg name = "name"
                         value = "IntelCPU"
        />
    </bean>
    -->

    <!--вариант с НЕСТАТИЧЕСКОЙ ФАБРИКОЙ
    похоже, что надо просто взять нестатический метод
    мы просто создаем бин-фабрику по аналогии с бинами, когда мы их внедряли
    по propertys, таким образом у нас создается экземпляр класса
    NonStaticCPUFactory и используются его методы
    потом мы создаем подбин, который будет подставлять внашу нестатичную
    фабрику сзначение name
    -->

    <!--нестатичная фабрика
    <bean id="nonStaticCPUfactory"
           class="spring.xml.NonStaticCPUFactory"
     >
     </bean>-->

    <!--подбин (некий factory-bean), подставляющий name
    в разделе factory-bean мы подставляем id нашей
    нестатичной фабрики
    в разделе factory-method проставляем
    название метода из класса-фабрики(из раздела java)

    ВНИМАНИЕ!
    в зависимый бин (гланый бин)
    мы прописываем ID именно фактори-бина, некоего подбина!(ЗАДАТЬ ВОПРОС ПРО СТРОКУ С САМОЙ ФАБРИКОЙ)
    -->

    <!--<bean id="nonStaticCPUfactory-podbean"
    factory-bean="nonStaticCPUfactory"
    factory-method="createCPU">-->
    <!--конструткор-арг имеет такой же смысл как и
    в статичной фабрике, мы через него подставляем
     значение параметра-->
    <!--<constructor-arg name = "name"
                     value = "AmdCPU"/>
    </bean>-->



    <!--ДАЛЕЕ ПРИМЕРЫ С КОЛЛЕКЦИЯМИ!-->
    
<!--Создаем зависимый бин про геттеры задать вопрос!
по умолчанию обращается к конструктору
также внизу казан пример, когда мы ЯВНО
указываем нужные бины(прием для единиченого использования)
для этого мы разобьем файл конфигурации (beans.xml)-->

    <!--<bean id ="comp" class="spring.xml.Comp">
    <property name="memory">
        <list>
            <bean class="spring.xml.SonyMemory"/>
            <bean class="spring.xml.SonyMemory"/>
            <bean class="spring.xml.KingstonMemory"/>
         </list>
    </property>
    </bean>-->
<!--    ВАРИАНТ СО ССЫЛКАМИ НА КОМПОНЕНТЫ ЛИСТА-->


    <!--<bean id ="comp" class="spring.xml.Comp">
       <property name="memory">
           <list>
               <ref bean = "SonyMemory1" />
               <ref bean = "SonyMemory2"/>
               <ref bean = "KingstonMemory"/>
            </list>
       </property>
       </bean>-->

    <!--ниже мы указываем ресурс,
    откуда будут подгружаться ссылки на компоненты листа-->

    <import resource="memory.xml"/>


<!--все объекты создаются как синглтоны-->
<!--скоупы -  singleton создается один раз и все
, prototipe - каждый раз приобращении к бину, создает новый объект
, request - когда он создает каждый новый объект при http запросе
, session - когда один объект создается в рамках http сессии session
, global - session - ???
 scope - штука, которая ограничивает срок жизни бина-->

<!--  ДАЛЬШЕ ПРО АВТОПРИВЯЗКУ просто прочитать,no, byName, byType, constructor
 no по умолчанию -->

    <bean id ="comp"
          class="spring.xml.Comp"
    autowire="byName">
        <property name="memory">
        <list>
            <ref bean = "SonyMemory1" />
            <ref bean = "SonyMemory2"/>
            <ref bean = "KingstonMemory"/>
        </list>
        </property>
    </bean>
    <bean id = "cpu" class="spring.xml.IntelCPU" />
    <!--ниже мы указываем ресурс,
    откуда будут подгружаться ссылки на компоненты листа-->
    <import resource="memory.xml"/>
</beans>